{"parsed":{"_path":"/middleware/api/middleware.api","_dir":"api","_draft":false,"_partial":true,"_locale":"","kind":"Package","canonicalReference":"@vue-storefront/middleware!","docComment":"","name":"@vue-storefront/middleware","preserveMemberOrder":false,"_id":"content:3.middleware:3.api:middleware.api.json","_type":"json","title":"MiddlewareApi","_source":"content","_file":"3.middleware/3.api/middleware.api.json","_extension":"json","toc":{"typeAlias":["AfterCallArgs","AnyFunction","ApiClientMethod","ApiClientMethods","ApiClientMethodWithContext","ApiMethods","ApiMethodsFactory","ApolloError","AxiosError","BeforeCallArgs","CallableContext","ComposableFunctionArgs","ContextedPlatformApi","ContextQuery","ContextualizedApi","CreateApiClientFn","CreateApiProxyFn","CustomQuery","CustomQueryFunction","ErrorObject","ExtendApiMethod","ExtendQuery","ExtensionHookWith","ExtensionWith","GetConstructorArgs","Integrations","IntegrationsLoaded","NullableRecord","ObjectItemRecord","ObjectRecord","ParamType","PartialRecord","PlatformApi","RecordOverloadedReturnType","StatusCode","TObject","TODO","UnknownError","WithoutContext","WithRequired"],"interface":["AfterCallParams","ApiClient","ApiClientConfig","ApiClientExtension","ApiClientExtensionHooks","ApiClientFactory","ApiClientFactoryParams","ApiContext","ApiInstance","ApplyingContextHooks","BeforeCallParams","CallHookParams","ClientContext","Context","ContextQueryParams","CreateServerOptions","FactoryParams","Helmet","HookParams","Integration","IntegrationContext","IntegrationLoaded","LoadInitConfigProps","MiddlewareConfig","MiddlewareContext","RequestParams"],"function":["apiClientFactory","createServer"]},"AfterCallArgs":{"_type":"typeAlias","name":"AfterCallArgs","description":"","type":"export type AfterCallArgs<T = any> = T;","references":[]},"AfterCallParams":{"_type":"interface","name":"AfterCallParams","properties":[{"_type":"param","name":"args","required":true,"type":"BeforeCallArgs<ARGS>","description":""},{"_type":"param","name":"response","required":true,"type":"AfterCallArgs<RESPONSE>","description":""}],"functions":[],"description":"","references":[{"href":"/middleware/api/middleware/CallHookParams","text":"CallHookParams"},{"href":"/middleware/api/middleware/BeforeCallArgs","text":"BeforeCallArgs"},{"href":"/middleware/api/middleware/AfterCallArgs","text":"AfterCallArgs"}],"signature":"export interface AfterCallParams<C, ARGS, RESPONSE> extends CallHookParams<C> {\n\targs: BeforeCallArgs<ARGS>;\n\tresponse: AfterCallArgs<RESPONSE>;\n}"},"AnyFunction":{"_type":"typeAlias","name":"AnyFunction","description":"","type":"export type AnyFunction = (...args: any) => any;","references":[]},"ApiClient":{"_type":"interface","name":"ApiClient","properties":[{"_type":"param","name":"api","required":true,"type":"API","description":""},{"_type":"param","name":"client","required":true,"type":"CLIENT","description":""},{"_type":"param","name":"settings","required":true,"type":"CONFIG & {\n        integrationName: string;\n    }","description":""}],"functions":[],"description":"","references":[],"signature":"export interface ApiClient<API = any, CONFIG = any, CLIENT = any> {\n\tapi: API;\n\tclient: CLIENT;\n\tsettings: CONFIG & {\n        integrationName: string;\n    };\n}"},"ApiClientConfig":{"_type":"interface","name":"ApiClientConfig","properties":[{"_type":"param","name":"client","required":false,"type":"CLIENT","description":""},{"_type":"param","name":"extensions","required":false,"type":"ApiClientExtension[]","description":""}],"functions":[],"description":"","references":[{"href":"/middleware/api/middleware/ApiClientExtension","text":"ApiClientExtension"}],"signature":"export interface ApiClientConfig<CLIENT = any> {\n\tclient?: CLIENT;\n\textensions?: ApiClientExtension[];\n}"},"ApiClientExtension":{"_type":"interface","name":"ApiClientExtension","properties":[{"_type":"param","name":"extendApiMethods","required":false,"type":"ExtendApiMethod<API, CONTEXT> | ApiMethodsFactory<ExtendApiMethod<API, CONTEXT>, CONFIG>","description":""},{"_type":"param","name":"extendApp","required":false,"type":"({ app, configuration, }: {\n        app: Express;\n        configuration: any;\n    }) => Promise<void> | void","description":""},{"_type":"param","name":"hooks","required":false,"type":"(req: Request, res: Response) => ApiClientExtensionHooks","description":""},{"_type":"param","name":"isNamespaced","required":false,"type":"boolean","description":""},{"_type":"param","name":"name","required":true,"type":"string","description":""}],"functions":[],"description":"","references":[{"href":"/middleware/api/middleware/ExtendApiMethod","text":"ExtendApiMethod"},{"href":"/middleware/api/middleware/ApiMethodsFactory","text":"ApiMethodsFactory"},{"href":"/middleware/api/middleware/ApiClientExtensionHooks","text":"ApiClientExtensionHooks"}],"signature":"export interface ApiClientExtension<API = any, CONTEXT = any, CONFIG = any> {\n\textendApiMethods?: ExtendApiMethod<API, CONTEXT> | ApiMethodsFactory<ExtendApiMethod<API, CONTEXT>, CONFIG>;\n\textendApp?: ({ app, configuration, }: {\n        app: Express;\n        configuration: any;\n    }) => Promise<void> | void;\n\thooks?: (req: Request, res: Response) => ApiClientExtensionHooks;\n\tisNamespaced?: boolean;\n\tname: string;\n}"},"ApiClientExtensionHooks":{"_type":"interface","name":"ApiClientExtensionHooks","properties":[{"_type":"param","name":"afterCall","required":false,"type":"<ARGS, RESPONSE>(params: AfterCallParams<C, ARGS, RESPONSE>) => AfterCallArgs","description":""},{"_type":"param","name":"afterCreate","required":false,"type":"(params: HookParams<C>) => C","description":""},{"_type":"param","name":"beforeCall","required":false,"type":"<ARGS>(params: BeforeCallParams<C, ARGS>) => BeforeCallArgs","description":""},{"_type":"param","name":"beforeCreate","required":false,"type":"(params: HookParams<C>) => C","description":""}],"functions":[],"description":"","references":[{"href":"/middleware/api/middleware/AfterCallParams","text":"AfterCallParams"},{"href":"/middleware/api/middleware/AfterCallArgs","text":"AfterCallArgs"},{"href":"/middleware/api/middleware/HookParams","text":"HookParams"},{"href":"/middleware/api/middleware/BeforeCallParams","text":"BeforeCallParams"},{"href":"/middleware/api/middleware/BeforeCallArgs","text":"BeforeCallArgs"}],"signature":"export interface ApiClientExtensionHooks<C = any> {\n\tafterCall?: <ARGS, RESPONSE>(params: AfterCallParams<C, ARGS, RESPONSE>) => AfterCallArgs;\n\tafterCreate?: (params: HookParams<C>) => C;\n\tbeforeCall?: <ARGS>(params: BeforeCallParams<C, ARGS>) => BeforeCallArgs;\n\tbeforeCreate?: (params: HookParams<C>) => C;\n}"},"apiClientFactory":{"_type":"function","id":"@vue-storefront/middleware!apiClientFactory:function(1)","name":"apiClientFactory","description":"","references":[{"href":"/middleware/api/middleware/ApiClientConfig","text":"ApiClientConfig"},{"href":"/middleware/api/middleware/ApiMethods","text":"ApiMethods"},{"href":"/middleware/api/middleware/ApiClientFactoryParams","text":"ApiClientFactoryParams"},{"href":"/middleware/api/middleware/ApiClientFactory","text":"ApiClientFactory"}],"examples":[],"returns":{"description":"","type":"export interface ApiClientFactory<CONFIG extends ApiClientConfig = any, API extends ApiMethods = {}> {\n\tcreateApiClient: CreateApiClientFn<CONFIG, API>;\n\tinit?: (configuration: TObject) => TObject;\n}"},"signature":"apiClientFactory: <ALL_SETTINGS extends ApiClientConfig<any>,\n\tALL_FUNCTIONS extends ApiMethods>(\n\tfactoryParams: ApiClientFactoryParams<ALL_SETTINGS,\n\tALL_FUNCTIONS,\n\tany>\n) => ApiClientFactory<any,\n\tALL_FUNCTIONS>","params":[{"_type":"param","name":"factoryParams","required":true,"type":"ApiClientFactoryParams<ALL_SETTINGS, ALL_FUNCTIONS, any>","description":""}]},"ApiClientFactory":{"_type":"interface","name":"ApiClientFactory","properties":[{"_type":"param","name":"createApiClient","required":true,"type":"CreateApiClientFn<CONFIG, API>","description":""},{"_type":"param","name":"init","required":false,"type":"(configuration: TObject) => TObject","description":"\nSets up integration config, runs once.\n"}],"functions":[],"description":"","references":[{"href":"/middleware/api/middleware/ApiClientConfig","text":"ApiClientConfig"},{"href":"/middleware/api/middleware/ApiMethods","text":"ApiMethods"},{"href":"/middleware/api/middleware/CreateApiClientFn","text":"CreateApiClientFn"},{"href":"/middleware/api/middleware/TObject","text":"TObject"}],"signature":"export interface ApiClientFactory<CONFIG extends ApiClientConfig = any, API extends ApiMethods = {}> {\n\tcreateApiClient: CreateApiClientFn<CONFIG, API>;\n\tinit?: (configuration: TObject) => TObject;\n}"},"ApiClientFactoryParams":{"_type":"interface","name":"ApiClientFactoryParams","properties":[{"_type":"param","name":"api","required":true,"type":"API | ApiMethodsFactory<API, CONFIG>","description":""},{"_type":"param","name":"extensions","required":false,"type":"ApiClientExtension<API>[]","description":""},{"_type":"param","name":"isProxy","required":false,"type":"boolean","description":""},{"_type":"param","name":"onCreate","required":true,"type":"(config: CONFIG, headers?: Record<string, string>) => Promise<{\n        client: CLIENT;\n        config: ApiClientConfig;\n    }> | {\n        client: CLIENT;\n        config: ApiClientConfig;\n    }","description":""}],"functions":[],"description":"","references":[{"href":"/middleware/api/middleware/ApiClientConfig","text":"ApiClientConfig"},{"href":"/middleware/api/middleware/ApiMethods","text":"ApiMethods"},{"href":"/middleware/api/middleware/ApiMethodsFactory","text":"ApiMethodsFactory"},{"href":"/middleware/api/middleware/ApiClientExtension","text":"ApiClientExtension"}],"signature":"export interface ApiClientFactoryParams<CONFIG extends ApiClientConfig, API extends ApiMethods = {}, CLIENT = any> {\n\tapi: API | ApiMethodsFactory<API, CONFIG>;\n\textensions?: ApiClientExtension<API>[];\n\tisProxy?: boolean;\n\tonCreate: (config: CONFIG, headers?: Record<string, string>) => Promise<{\n        client: CLIENT;\n        config: ApiClientConfig;\n    }> | {\n        client: CLIENT;\n        config: ApiClientConfig;\n    };\n}"},"ApiClientMethod":{"_type":"typeAlias","name":"ApiClientMethod","description":"","type":"export type ApiClientMethod = (...args: any) => Promise<any>;","references":[]},"ApiClientMethods":{"_type":"typeAlias","name":"ApiClientMethods","description":"","type":"export type ApiClientMethods<T> = {\n    [K in keyof T]: T[K] extends (...args: any) => any ? (...args: [...Parameters<T[K]>, CustomQuery?]) => ReturnType<T[K]> : T[K];\n};","references":[{"href":"/middleware/api/middleware/CustomQuery","text":"CustomQuery"}]},"ApiClientMethodWithContext":{"_type":"typeAlias","name":"ApiClientMethodWithContext","description":"","type":"export type ApiClientMethodWithContext<CONTEXT> = (context: CONTEXT, ...args: any) => any;","references":[]},"ApiContext":{"_type":"interface","name":"ApiContext","properties":[{"_type":"param","name":"client","required":true,"type":"CLIENT","description":""},{"_type":"param","name":"config","required":true,"type":"CONFIG","description":""},{"_type":"param","name":"customQueries","required":true,"type":"Record<string, CustomQueryFunction>","description":""},{"_type":"param","name":"extendQuery","required":true,"type":"ExtendQuery","description":""},{"_type":"param","name":"extensions","required":true,"type":"any","description":""},{"_type":"param","name":"req","required":true,"type":"REQUEST","description":""},{"_type":"param","name":"res","required":true,"type":"RESPONSE","description":""}],"functions":[],"description":"","references":[{"href":"/middleware/api/middleware/CustomQueryFunction","text":"CustomQueryFunction"},{"href":"/middleware/api/middleware/ExtendQuery","text":"ExtendQuery"}],"signature":"export interface ApiContext<CONFIG, CLIENT, REQUEST, RESPONSE> {\n\tclient: CLIENT;\n\tconfig: CONFIG;\n\tcustomQueries: Record<string, CustomQueryFunction>;\n\textendQuery: ExtendQuery;\n\textensions: any;\n\treq: REQUEST;\n\tres: RESPONSE;\n}"},"ApiInstance":{"_type":"interface","name":"ApiInstance","properties":[{"_type":"param","name":"api","required":true,"type":"API","description":""},{"_type":"param","name":"client","required":true,"type":"CLIENT","description":""},{"_type":"param","name":"settings","required":true,"type":"CONFIG","description":""}],"functions":[],"description":"","references":[],"signature":"export interface ApiInstance<CONFIG, API, CLIENT> {\n\tapi: API;\n\tclient: CLIENT;\n\tsettings: CONFIG;\n}"},"ApiMethods":{"_type":"typeAlias","name":"ApiMethods","description":"","type":"export type ApiMethods = Record<string, ApiClientMethod>;","references":[{"href":"/middleware/api/middleware/ApiClientMethod","text":"ApiClientMethod"}]},"ApiMethodsFactory":{"_type":"typeAlias","name":"ApiMethodsFactory","description":"","type":"export type ApiMethodsFactory<API extends ApiMethods, CONFIG extends ApiClientConfig> = (configuration: CONFIG) => API;","references":[{"href":"/middleware/api/middleware/ApiMethods","text":"ApiMethods"},{"href":"/middleware/api/middleware/ApiClientConfig","text":"ApiClientConfig"}]},"ApolloError":{"_type":"typeAlias","name":"ApolloError","description":"","type":"export type ApolloError = {\n    networkError?: number;\n    code?: string | number;\n    graphQLErrors: Array<any>;\n};","references":[]},"ApplyingContextHooks":{"_type":"interface","name":"ApplyingContextHooks","properties":[{"_type":"param","name":"after","required":true,"type":"<ARGS, RESPONSE>(params: AfterCallParams<CONFIG, ARGS, RESPONSE>) => AfterCallArgs","description":""},{"_type":"param","name":"before","required":true,"type":"<ARGS>(params: BeforeCallParams<CONFIG, ARGS>) => BeforeCallArgs","description":""}],"functions":[],"description":"","references":[{"href":"/middleware/api/middleware/AfterCallParams","text":"AfterCallParams"},{"href":"/middleware/api/middleware/AfterCallArgs","text":"AfterCallArgs"},{"href":"/middleware/api/middleware/BeforeCallParams","text":"BeforeCallParams"},{"href":"/middleware/api/middleware/BeforeCallArgs","text":"BeforeCallArgs"}],"signature":"export interface ApplyingContextHooks<CONFIG = any> {\n\tafter: <ARGS, RESPONSE>(params: AfterCallParams<CONFIG, ARGS, RESPONSE>) => AfterCallArgs;\n\tbefore: <ARGS>(params: BeforeCallParams<CONFIG, ARGS>) => BeforeCallArgs;\n}"},"AxiosError":{"_type":"typeAlias","name":"AxiosError","description":"","type":"export type AxiosError = {\n    isAxiosError: boolean;\n    code: string;\n    response?: {\n        status: number;\n    };\n};","references":[]},"BeforeCallArgs":{"_type":"typeAlias","name":"BeforeCallArgs","description":"","type":"export type BeforeCallArgs<T = any> = T;","references":[]},"BeforeCallParams":{"_type":"interface","name":"BeforeCallParams","properties":[{"_type":"param","name":"args","required":true,"type":"BeforeCallArgs<ARGS>","description":""}],"functions":[],"description":"","references":[{"href":"/middleware/api/middleware/CallHookParams","text":"CallHookParams"},{"href":"/middleware/api/middleware/BeforeCallArgs","text":"BeforeCallArgs"}],"signature":"export interface BeforeCallParams<C, ARGS> extends CallHookParams<C> {\n\targs: BeforeCallArgs<ARGS>;\n}"},"CallableContext":{"_type":"typeAlias","name":"CallableContext","description":"","type":"export type CallableContext<API extends ApiMethods> = {\n    middleware: MiddlewareContext<API>;\n};","references":[{"href":"/middleware/api/middleware/ApiMethods","text":"ApiMethods"},{"href":"/middleware/api/middleware/MiddlewareContext","text":"MiddlewareContext"}]},"CallHookParams":{"_type":"interface","name":"CallHookParams","properties":[{"_type":"param","name":"callName","required":true,"type":"string","description":""}],"functions":[],"description":"","references":[{"href":"/middleware/api/middleware/HookParams","text":"HookParams"}],"signature":"export interface CallHookParams<C> extends HookParams<C> {\n\tcallName: string;\n}"},"ClientContext":{"_type":"interface","name":"ClientContext","properties":[{"_type":"param","name":"client","required":true,"type":"CLIENT","description":""},{"_type":"param","name":"config","required":true,"type":"CONFIG","description":""}],"functions":[],"description":"","references":[],"signature":"export interface ClientContext<CLIENT = any, CONFIG = any> {\n\tclient: CLIENT;\n\tconfig: CONFIG;\n}"},"ComposableFunctionArgs":{"_type":"typeAlias","name":"ComposableFunctionArgs","description":"","type":"export type ComposableFunctionArgs<T> = T & {\n    customQuery?: CustomQuery;\n};","references":[{"href":"/middleware/api/middleware/CustomQuery","text":"CustomQuery"}]},"Context":{"_type":"interface","name":"Context","properties":[],"functions":[],"description":"","references":[],"signature":"export interface Context<CLIENT = any, CONFIG = any, API = any, EXTENDED_API = any> {\n\n}"},"ContextedPlatformApi":{"_type":"typeAlias","name":"ContextedPlatformApi","description":"","type":"export type ContextedPlatformApi<T extends PlatformApi> = {\n    [P in keyof T]: T[P] extends (context: Context, ...arg: infer X) => Promise<any> ? (...arg: X) => Promise<any> : never;\n};","references":[{"href":"/middleware/api/middleware/PlatformApi","text":"PlatformApi"},{"href":"/middleware/api/middleware/Context","text":"Context"}]},"ContextQuery":{"_type":"typeAlias","name":"ContextQuery","description":"","type":"export type ContextQuery<T extends ParamType = string> = {\n    [Key in T]: ContextQueryParams;\n};","references":[{"href":"/middleware/api/middleware/ParamType","text":"ParamType"},{"href":"/middleware/api/middleware/ContextQueryParams","text":"ContextQueryParams"}]},"ContextQueryParams":{"_type":"interface","name":"ContextQueryParams","properties":[{"_type":"param","name":"query","required":true,"type":"string","description":""},{"_type":"param","name":"variables","required":true,"type":"TObject","description":""}],"functions":[],"description":"","references":[{"href":"/middleware/api/middleware/TObject","text":"TObject"}],"signature":"export interface ContextQueryParams {\n\tquery: string;\n\tvariables: TObject;\n}"},"ContextualizedApi":{"_type":"typeAlias","name":"ContextualizedApi","description":"\nAll available API methods without first argument -  `context` , because this prop is set automatically.\n","type":"export type ContextualizedApi<API> = {\n    [T in keyof API]: API[T] extends (context: any, ...arguments_: infer P) => infer R ? (...arguments_: P) => R : never;\n};","references":[]},"CreateApiClientFn":{"_type":"typeAlias","name":"CreateApiClientFn","description":"","type":"export type CreateApiClientFn<CONFIG extends ApiClientConfig, API extends ApiMethods> = {\n    <T extends ApiClientConfig, C>(givenConfig: CONFIG, customApi?: ApiMethods): Promise<ApiInstance<T, API & ApiMethods, C>>;\n    _predefinedExtensions?: ApiClientExtension<API>[];\n};","references":[{"href":"/middleware/api/middleware/ApiClientConfig","text":"ApiClientConfig"},{"href":"/middleware/api/middleware/ApiMethods","text":"ApiMethods"},{"href":"/middleware/api/middleware/ApiInstance","text":"ApiInstance"},{"href":"/middleware/api/middleware/ApiClientExtension","text":"ApiClientExtension"}]},"CreateApiProxyFn":{"_type":"typeAlias","name":"CreateApiProxyFn","description":"","type":"export type CreateApiProxyFn = <CONFIG, API, CLIENT>(givenConfig: any, customApi?: any) => ApiInstance<CONFIG, API, CLIENT>;","references":[{"href":"/middleware/api/middleware/ApiInstance","text":"ApiInstance"}]},"createServer":{"_type":"function","id":"@vue-storefront/middleware!createServer:function(1)","name":"createServer","description":"","references":[{"href":"/middleware/api/middleware/IntegrationContext","text":"IntegrationContext"},{"href":"/middleware/api/middleware/MiddlewareConfig","text":"MiddlewareConfig"},{"href":"/middleware/api/middleware/CreateServerOptions","text":"CreateServerOptions"}],"examples":[],"returns":{"description":"","type":""},"signature":"declare function createServer<TIntegrationContext extends Record<string,\n\tIntegrationContext>>(\n\tconfig: MiddlewareConfig<TIntegrationContext>,\n\toptions?: CreateServerOptions\n): Promise<Express>;","params":[{"_type":"param","name":"config","required":true,"type":"MiddlewareConfig<TIntegrationContext>","description":""},{"_type":"param","name":"options","required":false,"type":"CreateServerOptions","description":""}]},"CreateServerOptions":{"_type":"interface","name":"CreateServerOptions","properties":[{"_type":"param","name":"bodyParser","required":false,"type":"bodyParser.OptionsJson","description":"\nThe options for the  `express.json`  middleware. If not provided, the default options will be used.\n"},{"_type":"param","name":"cookieParser","required":false,"type":"{\n        secret: string | string[];\n        options: cookieParser.CookieParseOptions;\n    }","description":"\nThe options for the  `cookie-parser`  middleware. If not provided, the default options will be used.\n"},{"_type":"param","name":"cors","required":false,"type":"CorsOptions | CorsOptionsDelegate","description":"\nThe options for the  `cors`  middleware. If not provided, the following configuration will be used:\n \n```json\n{\n \"credentials\": true,\n \"origin\": [\"http://localhost:3000\", \"http://localhost:4000\"]\n}\n\n```\n \n\n"}],"functions":[],"description":"","references":[],"signature":"export interface CreateServerOptions {\n\tbodyParser?: bodyParser.OptionsJson;\n\tcookieParser?: {\n        secret: string | string[];\n        options: cookieParser.CookieParseOptions;\n    };\n\tcors?: CorsOptions | CorsOptionsDelegate;\n}"},"CustomQuery":{"_type":"typeAlias","name":"CustomQuery","description":"","type":"export type CustomQuery<T extends ParamType = string> = {\n    [P in T]?: string;\n} & {\n    metadata?: unknown;\n};","references":[{"href":"/middleware/api/middleware/ParamType","text":"ParamType"}]},"CustomQueryFunction":{"_type":"typeAlias","name":"CustomQueryFunction","description":"","type":"export type CustomQueryFunction<T = any> = ({ query, variables, metadata, }: {\n    query: string;\n    variables: T;\n    metadata: unknown;\n}) => {\n    query: string;\n    variables: T;\n    metadata?: unknown;\n};","references":[]},"ErrorObject":{"_type":"typeAlias","name":"ErrorObject","description":"","type":"export type ErrorObject<T extends string> = AxiosError | ApolloError | UnknownError<T>;","references":[{"href":"/middleware/api/middleware/AxiosError","text":"AxiosError"},{"href":"/middleware/api/middleware/ApolloError","text":"ApolloError"},{"href":"/middleware/api/middleware/UnknownError","text":"UnknownError"}]},"ExtendApiMethod":{"_type":"typeAlias","name":"ExtendApiMethod","description":"","type":"export type ExtendApiMethod<API, CONTEXT> = {\n    [K in keyof API]?: ApiClientMethodWithContext<CONTEXT>;\n} & {\n    [key: string]: ApiClientMethodWithContext<CONTEXT>;\n};","references":[{"href":"/middleware/api/middleware/ApiClientMethodWithContext","text":"ApiClientMethodWithContext"}]},"ExtendQuery":{"_type":"typeAlias","name":"ExtendQuery","description":"","type":"export type ExtendQuery = <T extends ContextQuery<string>, Key extends keyof T>(customQuery: CustomQuery<Key> | null, defaults: T) => ContextQuery<Key>;","references":[{"href":"/middleware/api/middleware/ContextQuery","text":"ContextQuery"},{"href":"/middleware/api/middleware/CustomQuery","text":"CustomQuery"}]},"ExtensionHookWith":{"_type":"typeAlias","name":"ExtensionHookWith","description":"","type":"export type ExtensionHookWith<T extends keyof ApiClientExtensionHooks> = WithRequired<ApiClientExtensionHooks, T>;","references":[{"href":"/middleware/api/middleware/ApiClientExtensionHooks","text":"ApiClientExtensionHooks"},{"href":"/middleware/api/middleware/WithRequired","text":"WithRequired"}]},"ExtensionWith":{"_type":"typeAlias","name":"ExtensionWith","description":"","type":"export type ExtensionWith<T extends keyof ApiClientExtension> = WithRequired<ApiClientExtension, T>;","references":[{"href":"/middleware/api/middleware/ApiClientExtension","text":"ApiClientExtension"},{"href":"/middleware/api/middleware/WithRequired","text":"WithRequired"}]},"FactoryParams":{"_type":"interface","name":"FactoryParams","properties":[{"_type":"param","name":"api","required":false,"type":"Partial<API>","description":""},{"_type":"param","name":"provide","required":false,"type":"(context: Context) => any","description":""}],"functions":[],"description":"","references":[{"href":"/middleware/api/middleware/PlatformApi","text":"PlatformApi"},{"href":"/middleware/api/middleware/Context","text":"Context"}],"signature":"export interface FactoryParams<API extends PlatformApi = any> {\n\tapi?: Partial<API>;\n\tprovide?: (context: Context) => any;\n}"},"GetConstructorArgs":{"_type":"typeAlias","name":"GetConstructorArgs","description":"","type":"export type GetConstructorArgs<T> = T extends new (...args: infer U) => any ? U : never;","references":[]},"Helmet":{"_type":"interface","name":"Helmet","properties":[{"_type":"param","name":"helmet","required":false,"type":"boolean | HelmetOptions","description":""}],"functions":[],"description":"","references":[],"signature":"export interface Helmet extends HelmetOptions {\n\thelmet?: boolean | HelmetOptions;\n}"},"HookParams":{"_type":"interface","name":"HookParams","properties":[{"_type":"param","name":"configuration","required":false,"type":"C","description":""}],"functions":[],"description":"","references":[],"signature":"export interface HookParams<C> {\n\tconfiguration?: C;\n}"},"Integration":{"_type":"interface","name":"Integration","properties":[{"_type":"param","name":"configuration","required":true,"type":"CONFIG","description":""},{"_type":"param","name":"customQueries","required":false,"type":"Record<string, CustomQueryFunction>","description":""},{"_type":"param","name":"errorHandler","required":false,"type":"(error: unknown, req: Request, res: Response) => void","description":""},{"_type":"param","name":"extensions","required":false,"type":"<T extends ApiClientMethodWithContext<CONTEXT>>(extensions: ApiClientExtension<API, CONTEXT>[]) => ApiClientExtension<API & T, CONTEXT>[]","description":""},{"_type":"param","name":"initConfig","required":false,"type":"TObject","description":""},{"_type":"param","name":"location","required":true,"type":"string","description":""}],"functions":[],"description":"","references":[{"href":"/middleware/api/middleware/TObject","text":"TObject"},{"href":"/middleware/api/middleware/ApiMethods","text":"ApiMethods"},{"href":"/middleware/api/middleware/CustomQueryFunction","text":"CustomQueryFunction"},{"href":"/middleware/api/middleware/ApiClientMethodWithContext","text":"ApiClientMethodWithContext"},{"href":"/middleware/api/middleware/ApiClientExtension","text":"ApiClientExtension"}],"signature":"export interface Integration<CONFIG extends TObject = any, API extends ApiMethods = any, CONTEXT extends TObject = any> {\n\tconfiguration: CONFIG;\n\tcustomQueries?: Record<string, CustomQueryFunction>;\n\terrorHandler?: (error: unknown, req: Request, res: Response) => void;\n\textensions?: <T extends ApiClientMethodWithContext<CONTEXT>>(extensions: ApiClientExtension<API, CONTEXT>[]) => ApiClientExtension<API & T, CONTEXT>[];\n\tinitConfig?: TObject;\n\tlocation: string;\n}"},"IntegrationContext":{"_type":"interface","name":"IntegrationContext","properties":[{"_type":"param","name":"api","required":true,"type":"API","description":""},{"_type":"param","name":"client","required":true,"type":"CLIENT","description":""},{"_type":"param","name":"config","required":true,"type":"CONFIG","description":""},{"_type":"param","name":"extendedApi","required":true,"type":"EXTENDED_API","description":""}],"functions":[],"description":"","references":[{"href":"/middleware/api/middleware/MiddlewareContext","text":"MiddlewareContext"}],"signature":"export interface IntegrationContext<CLIENT = any, CONFIG = any, API = any, EXTENDED_API = any> extends MiddlewareContext {\n\tapi: API;\n\tclient: CLIENT;\n\tconfig: CONFIG;\n\textendedApi: EXTENDED_API;\n}"},"IntegrationLoaded":{"_type":"interface","name":"IntegrationLoaded","properties":[{"_type":"param","name":"apiClient","required":true,"type":"ApiClientFactory<CONFIG, API>","description":""},{"_type":"param","name":"configuration","required":true,"type":"CONFIG","description":""},{"_type":"param","name":"customQueries","required":false,"type":"Record<string, CustomQueryFunction>","description":""},{"_type":"param","name":"errorHandler","required":true,"type":"(error: unknown, req: Request, res: Response) => void","description":""},{"_type":"param","name":"extensions","required":true,"type":"ApiClientExtension<API>[]","description":""},{"_type":"param","name":"initConfig","required":true,"type":"TObject","description":""}],"functions":[],"description":"","references":[{"href":"/middleware/api/middleware/ApiClientConfig","text":"ApiClientConfig"},{"href":"/middleware/api/middleware/ApiMethods","text":"ApiMethods"},{"href":"/middleware/api/middleware/ApiClientFactory","text":"ApiClientFactory"},{"href":"/middleware/api/middleware/CustomQueryFunction","text":"CustomQueryFunction"},{"href":"/middleware/api/middleware/ApiClientExtension","text":"ApiClientExtension"},{"href":"/middleware/api/middleware/TObject","text":"TObject"}],"signature":"export interface IntegrationLoaded<CONFIG extends ApiClientConfig, API extends ApiMethods> {\n\tapiClient: ApiClientFactory<CONFIG, API>;\n\tconfiguration: CONFIG;\n\tcustomQueries?: Record<string, CustomQueryFunction>;\n\terrorHandler: (error: unknown, req: Request, res: Response) => void;\n\textensions: ApiClientExtension<API>[];\n\tinitConfig: TObject;\n}"},"Integrations":{"_type":"typeAlias","name":"Integrations","description":"","type":"export type Integrations<TIntegrationsContext extends TObject = TObject> = {\n    [IntegrationCode in keyof TIntegrationsContext]: IntegrationCode extends string ? Integration<TIntegrationsContext[IntegrationCode][\"config\"], TIntegrationsContext[IntegrationCode][\"api\"], TIntegrationsContext[IntegrationCode]> : never;\n};","references":[{"href":"/middleware/api/middleware/TObject","text":"TObject"},{"href":"/middleware/api/middleware/Integration","text":"Integration"}]},"IntegrationsLoaded":{"_type":"typeAlias","name":"IntegrationsLoaded","description":"","type":"export type IntegrationsLoaded<CONFIG extends ApiClientConfig = any, API extends ApiMethods = any> = Record<string, IntegrationLoaded<CONFIG, API>>;","references":[{"href":"/middleware/api/middleware/ApiClientConfig","text":"ApiClientConfig"},{"href":"/middleware/api/middleware/ApiMethods","text":"ApiMethods"},{"href":"/middleware/api/middleware/IntegrationLoaded","text":"IntegrationLoaded"}]},"LoadInitConfigProps":{"_type":"interface","name":"LoadInitConfigProps","properties":[{"_type":"param","name":"apiClient","required":true,"type":"ApiClientFactory","description":""},{"_type":"param","name":"integration","required":true,"type":"Integration","description":""},{"_type":"param","name":"tag","required":true,"type":"string","description":""}],"functions":[],"description":"","references":[{"href":"/middleware/api/middleware/ApiClientFactory","text":"ApiClientFactory"},{"href":"/middleware/api/middleware/Integration","text":"Integration"}],"signature":"export interface LoadInitConfigProps {\n\tapiClient: ApiClientFactory;\n\tintegration: Integration;\n\ttag: string;\n}"},"MiddlewareConfig":{"_type":"interface","name":"MiddlewareConfig","properties":[{"_type":"param","name":"helmet","required":false,"type":"boolean | Readonly<HelmetOptions>","description":""},{"_type":"param","name":"integrations","required":true,"type":"Integrations<TIntegrationsContext>","description":""}],"functions":[],"description":"","references":[{"href":"/middleware/api/middleware/IntegrationContext","text":"IntegrationContext"},{"href":"/middleware/api/middleware/Integrations","text":"Integrations"}],"signature":"export interface MiddlewareConfig<TIntegrationsContext extends Record<string, IntegrationContext> = Record<string, IntegrationContext>> {\n\thelmet?: boolean | Readonly<HelmetOptions>;\n\tintegrations: Integrations<TIntegrationsContext>;\n}"},"MiddlewareContext":{"_type":"interface","name":"MiddlewareContext","properties":[{"_type":"param","name":"customQueries","required":true,"type":"Record<string, CustomQueryFunction>","description":""},{"_type":"param","name":"extensions","required":true,"type":"ApiClientExtension<API>[]","description":""},{"_type":"param","name":"getApiClient","required":true,"type":"<Api = any, Config = any, Client = any>(integrationName: string) => ApiClient<Api, Config, Client>","description":""},{"_type":"param","name":"integrations","required":true,"type":"IntegrationsLoaded","description":""},{"_type":"param","name":"req","required":true,"type":"Request","description":""},{"_type":"param","name":"res","required":true,"type":"Response","description":""}],"functions":[],"description":"","references":[{"href":"/middleware/api/middleware/ApiMethods","text":"ApiMethods"},{"href":"/middleware/api/middleware/CustomQueryFunction","text":"CustomQueryFunction"},{"href":"/middleware/api/middleware/ApiClientExtension","text":"ApiClientExtension"},{"href":"/middleware/api/middleware/ApiClient","text":"ApiClient"},{"href":"/middleware/api/middleware/IntegrationsLoaded","text":"IntegrationsLoaded"}],"signature":"export interface MiddlewareContext<API extends ApiMethods = any> {\n\tcustomQueries: Record<string, CustomQueryFunction>;\n\textensions: ApiClientExtension<API>[];\n\tgetApiClient: <Api = any, Config = any, Client = any>(integrationName: string) => ApiClient<Api, Config, Client>;\n\tintegrations: IntegrationsLoaded;\n\treq: Request;\n\tres: Response;\n}"},"NullableRecord":{"_type":"typeAlias","name":"NullableRecord","description":"","type":"export type NullableRecord<V> = V | null;","references":[]},"ObjectItemRecord":{"_type":"typeAlias","name":"ObjectItemRecord","description":"","type":"export type ObjectItemRecord<V = string, K = string> = {\n    [keyof in K as string]: V;\n};","references":[]},"ObjectRecord":{"_type":"typeAlias","name":"ObjectRecord","description":"","type":"export type ObjectRecord<O> = {\n    [K in keyof O]: O[K];\n};","references":[]},"ParamType":{"_type":"typeAlias","name":"ParamType","description":"","type":"export type ParamType = string | number | symbol;","references":[]},"PartialRecord":{"_type":"typeAlias","name":"PartialRecord","description":"","type":"export type PartialRecord<O> = {\n    [K in keyof O]?: O[K];\n};","references":[]},"PlatformApi":{"_type":"typeAlias","name":"PlatformApi","description":"","type":"export type PlatformApi = {\n    [functionName: string]: (context: Context, ...args: any[]) => Promise<any>;\n};","references":[{"href":"/middleware/api/middleware/Context","text":"Context"}]},"RecordOverloadedReturnType":{"_type":"typeAlias","name":"RecordOverloadedReturnType","description":"","type":"export type RecordOverloadedReturnType<T> = T extends {\n    (...args: any[]): infer R;\n    (...args: any[]): infer R;\n    (...args: any[]): infer R;\n    (...args: any[]): infer R;\n} ? R : T extends {\n    (...args: any[]): infer R;\n    (...args: any[]): infer R;\n    (...args: any[]): infer R;\n} ? R : T extends {\n    (...args: any[]): infer R;\n    (...args: any[]): infer R;\n} ? R : T extends (...args: any[]) => infer R ? R : any;","references":[]},"RequestParams":{"_type":"interface","name":"RequestParams","properties":[{"_type":"param","name":"functionName","required":true,"type":"string","description":""},{"_type":"param","name":"integrationName","required":true,"type":"string","description":""}],"functions":[],"description":"","references":[],"signature":"export interface RequestParams {\n\tfunctionName: string;\n\tintegrationName: string;\n}"},"StatusCode":{"_type":"typeAlias","name":"StatusCode","description":"","type":"export type StatusCode = number | null;","references":[]},"TObject":{"_type":"typeAlias","name":"TObject","description":"","type":"export type TObject = Record<string, any>;","references":[]},"TODO":{"_type":"typeAlias","name":"TODO","description":"","type":"export type TODO = any;","references":[]},"UnknownError":{"_type":"typeAlias","name":"UnknownError","description":"","type":"export type UnknownError<T extends string> = {\n    [K in T]?: number;\n} & {\n    [x: string]: UnknownError<T> | any;\n};","references":[{"href":"/middleware/api/middleware/UnknownError","text":"UnknownError"}]},"WithoutContext":{"_type":"typeAlias","name":"WithoutContext","description":"\nRemoves the  `context`  from the methods of an API Client.  `context`  is an internal parameter added by the Server Middleware to the methods of the API Client. Removing it allows to define the contract of the endpoints exposed by the Server Middleware.\n","type":"export type WithoutContext<Methods extends ApiMethods> = {\n    [T in keyof Methods]: Methods[T] extends (context: any, ...arguments_: infer P) => infer R ? (...arguments_: P) => R : never;\n};","references":[{"href":"/middleware/api/middleware/ApiMethods","text":"ApiMethods"}]},"WithRequired":{"_type":"typeAlias","name":"WithRequired","description":"","type":"export type WithRequired<T, K extends keyof T> = T & {\n    [P in K]-?: T[P];\n};","references":[]},"packageName":"middleware"},"hash":"sFDLgz7O8i"}