{"parsed":{"_path":"/middleware/api/multistore.api","_dir":"api","_draft":false,"_partial":true,"_locale":"","kind":"Package","canonicalReference":"@vue-storefront/multistore!","docComment":"","name":"@vue-storefront/multistore","preserveMemberOrder":false,"_id":"content:3.middleware:3.api:multistore.api.json","_type":"json","title":"MultistoreApi","_source":"content","_file":"3.middleware/3.api/multistore.api.json","_extension":"json","toc":{"interface":["CacheManager","FetchConfigWithCacheParams","MultistoreExtensionMethods"],"function":["createMultistoreExtension"],"typeAlias":["StoreConfig"]},"CacheManager":{"_type":"interface","name":"CacheManager","properties":[],"functions":[{"_type":"function","id":"@vue-storefront/multistore!CacheManager#get:member(1)","name":"get","description":"\nGets a store configuration from cache storage based on the  `key`  value.\n","references":[{"href":"/middleware/api/multistore/StoreConfig","text":"StoreConfig"}],"examples":[],"returns":{"description":"","type":"export type StoreConfig = Record<string, any>;"},"signature":"get(\n\tkey: string\n): MaybePromise<StoreConfig | undefined>;","params":[{"_type":"param","name":"key","required":true,"type":"string","description":""}]},{"_type":"function","id":"@vue-storefront/multistore!CacheManager#set:member(1)","name":"set","description":"\nSets a store configuration in the cache storage with identifier equals  `key`  value.\n","references":[{"href":"/middleware/api/multistore/StoreConfig","text":"StoreConfig"}],"examples":[],"returns":{"description":"","type":""},"signature":"set(\n\tkey: string,\n\tvalue: StoreConfig\n): MaybePromise<unknown>;","params":[{"_type":"param","name":"key","required":true,"type":"string","description":""},{"_type":"param","name":"value","required":true,"type":"StoreConfig","description":""}]}],"description":"\nCache manager is responsible for caching configuration and retreiving configuration from cache.\n","references":[],"signature":"export interface CacheManager {\n\tget(key: string): MaybePromise<StoreConfig | undefined>;\n\tset(key: string, value: StoreConfig): MaybePromise<unknown>;\n}"},"createMultistoreExtension":{"_type":"function","id":"@vue-storefront/multistore!createMultistoreExtension:function(1)","name":"createMultistoreExtension","description":"","references":[{"href":"/middleware/api/multistore/MultistoreExtensionMethods","text":"MultistoreExtensionMethods"},{"href":"/middleware/api/middleware/HookParams","text":"HookParams"},{"href":"/middleware/api/multistore/StoreConfig","text":"StoreConfig"}],"examples":[],"returns":{"description":"","type":"export interface HookParams<C> {\n\tconfiguration?: C;\n}"},"signature":"createMultistoreExtension: (\n\tmultistoreConfig: MultistoreExtensionMethods\n) => {\n    name: string;\n    isNamespaced: false;\n    extendApp: () => void;\n    hooks: (req: Request) => {\n        beforeCreate: ({ configuration: baseConfig }: import(\"@vue-storefront/middleware\").HookParams<any>) => Promise<import(\"./types\").StoreConfig>;\n    };\n}","params":[{"_type":"param","name":"multistoreConfig","required":true,"type":"MultistoreExtensionMethods","description":""}]},"FetchConfigWithCacheParams":{"_type":"interface","name":"FetchConfigWithCacheParams","properties":[{"_type":"param","name":"cacheManager","required":true,"type":"CacheManager","description":"\nCache manager.\n"},{"_type":"param","name":"domain","required":true,"type":"string","description":"\nDomain of the request.\n"},{"_type":"param","name":"multistore","required":true,"type":"MultistoreExtensionMethods","description":"\nExtension methods defined in the middleware multistore configuration.\n"}],"functions":[],"description":"\nParameters for updateConfig utility function.\n","references":[{"href":"/middleware/api/multistore/CacheManager","text":"CacheManager"},{"href":"/middleware/api/multistore/MultistoreExtensionMethods","text":"MultistoreExtensionMethods"}],"signature":"export interface FetchConfigWithCacheParams {\n\tcacheManager: CacheManager;\n\tdomain: string;\n\tmultistore: MultistoreExtensionMethods;\n}"},"MultistoreExtensionMethods":{"_type":"interface","name":"MultistoreExtensionMethods","properties":[{"_type":"param","name":"cacheManagerFactory","required":true,"type":"() => CacheManager","description":"\nCache manager factory creates cache manager.\n"},{"_type":"param","name":"fetchConfiguration","required":true,"type":"(params: {\n        domain: string;\n    }) => MaybePromise<Record<string, StoreConfig>>","description":"\nFetches configuration from external service.\n"},{"_type":"param","name":"mergeConfigurations","required":true,"type":"(params: {\n        baseConfig: StoreConfig;\n        storeConfig: StoreConfig;\n    }) => StoreConfig","description":"\nOverwrites base configuration with store configuration.\n"}],"functions":[],"description":"\nExtension methods defined in the middleware multistore configuration.\n","references":[{"href":"/middleware/api/multistore/CacheManager","text":"CacheManager"},{"href":"/middleware/api/multistore/StoreConfig","text":"StoreConfig"}],"signature":"export interface MultistoreExtensionMethods {\n\tcacheManagerFactory: () => CacheManager;\n\tfetchConfiguration: (params: {\n        domain: string;\n    }) => MaybePromise<Record<string, StoreConfig>>;\n\tmergeConfigurations: (params: {\n        baseConfig: StoreConfig;\n        storeConfig: StoreConfig;\n    }) => StoreConfig;\n}"},"StoreConfig":{"_type":"typeAlias","name":"StoreConfig","description":"\nType alias for any store configuration.\n","type":"export type StoreConfig = Record<string, any>;","references":[]},"packageName":"multistore"},"hash":"pFQoozkypQ"}