{"parsed":{"_path":"/sdk/api/sdk.api","_dir":"api","_draft":false,"_partial":true,"_locale":"","kind":"Package","canonicalReference":"@vue-storefront/sdk!","docComment":"","name":"@vue-storefront/sdk","preserveMemberOrder":false,"_id":"content:4.sdk:4.api:sdk.api.json","_type":"json","title":"SdkApi","_source":"content","_file":"4.sdk/4.api/sdk.api.json","_extension":"json","toc":{"typeAlias":["AnyFunction","BaseConfig","ComputedConfig","Connector","EndpointsConstraint","ErrorCausedBySDKError","ErrorHandler","ErrorHandlerContext","ErrorParams","EventCallback","Extension","ExtensionInitializer","HTTPClient","InitFunction","Interceptor","InterceptorArgsAfter","InterceptorArgsBefore","InterceptorResultAfter","InterceptorResultBefore","InterceptorsConfig","InterceptorType","Logger","MethodConfig","Methods","Module","ModuleInitializer","ModuleInitializerWithMandatoryOptions","ModuleOptions","OnRequestPayload","OnResponsePayload","Options","RequestConfig","RequestSender","SDKApi","SDKConfig","SdkErrorPredicate","Subscribers"],"function":["buildModule","getRequestSender","handleError","initSDK","initVSFSDK","isCausedBySdkHttpError","isSdkRequestError","isSdkUnauthorizedError","isSpecificSdkHttpError","middlewareModule","prepareConfig"],"variable":["eventManager"]},"AnyFunction":{"_type":"typeAlias","name":"AnyFunction","description":"\nAnyFunction type represents a function that accepts any number of arguments and returns any type of value. It is used for the connector methods, interceptors, overrides and extensions for which we don't know the exact types.\n","type":"export type AnyFunction = (...args: Array<any>) => any;","references":[]},"BaseConfig":{"_type":"typeAlias","name":"BaseConfig","description":"\nBase configuration object for HTTP requests. It includes essential configurations like the HTTP method.\n\nThis type serves as a base for more detailed configuration objects by specifying the method of the HTTP request.\n","type":"export type BaseConfig = {\n    method?: \"GET\" | \"POST\";\n    [key: string]: any;\n};","references":[]},"buildModule":{"_type":"function","id":"@vue-storefront/sdk!buildModule:function(2)","name":"buildModule","description":"","references":[{"href":"/sdk/api/sdk/Module","text":"Module"},{"href":"/sdk/api/sdk/ModuleOptions","text":"ModuleOptions"},{"href":"/sdk/api/sdk/Extension","text":"Extension"},{"href":"/sdk/api/sdk/ModuleInitializer","text":"ModuleInitializer"},{"href":"/sdk/api/sdk/ExtensionInitializer","text":"ExtensionInitializer"}],"examples":[],"returns":{"description":"","type":""},"signature":"declare function buildModule<InitializedModule extends Module,\n\tOptions extends ModuleOptions = object,\n\tInitializedExtension extends Extension<InitializedModule> = object,\n\tExtensionOptions extends ModuleOptions = object>(\n\tmodule: ModuleInitializer<InitializedModule,\n\tOptions>,\n\tmoduleOptions?: Options,\n\textension?: ExtensionInitializer<InitializedModule,\n\tInitializedExtension,\n\tExtensionOptions> | InitializedExtension,\n\textensionOptions?: ExtensionOptions\n): InitializedModule & InitializedExtension;","params":[{"_type":"param","name":"module","required":true,"type":"ModuleInitializer<InitializedModule, Options>","description":""},{"_type":"param","name":"moduleOptions","required":false,"type":"Options","description":""},{"_type":"param","name":"extension","required":false,"type":"ExtensionInitializer<InitializedModule, InitializedExtension, ExtensionOptions> | InitializedExtension","description":""},{"_type":"param","name":"extensionOptions","required":false,"type":"ExtensionOptions","description":""}]},"ComputedConfig":{"_type":"typeAlias","name":"ComputedConfig","description":"\nComputed configuration for HTTP requests, derived from  `RequestConfig` . Normalizes header values to strings for consistent request formatting.\n","type":"export type ComputedConfig = BaseConfig & {\n    headers?: Record<string, string>;\n};","references":[{"href":"/sdk/api/sdk/BaseConfig","text":"BaseConfig"}]},"Connector":{"_type":"typeAlias","name":"Connector","description":"\nConnector returns all methods that are exposed by the module.\n","type":"export type Connector = Record<string, AnyFunction>;","references":[{"href":"/sdk/api/sdk/AnyFunction","text":"AnyFunction"}]},"EndpointsConstraint":{"_type":"typeAlias","name":"EndpointsConstraint","description":"\nRepresents the constraint for API endpoint functions within the SDK. Each endpoint function must return a Promise, allowing for asynchronous operations.\n","type":"export type EndpointsConstraint = {\n    [key: string]: AnyFunction;\n};","references":[{"href":"/sdk/api/sdk/AnyFunction","text":"AnyFunction"}]},"ErrorCausedBySDKError":{"_type":"typeAlias","name":"ErrorCausedBySDKError","description":"\nRepresents an error type with a cause property of type  `SDKError` .\n","type":"export type ErrorCausedBySDKError = Error & {\n    cause: SdkHttpError;\n};","references":[{"href":"/sdk/api/sdk/SdkHttpError","text":"SdkHttpError"}]},"ErrorHandler":{"_type":"typeAlias","name":"ErrorHandler","description":"\nDefines a generic error handler function type. This abstraction allows for custom error handling logic, which can be implemented by the consumer of the HTTP client.\n","type":"export type ErrorHandler = (context: ErrorHandlerContext) => Promise<any>;","references":[{"href":"/sdk/api/sdk/ErrorHandlerContext","text":"ErrorHandlerContext"}]},"ErrorHandlerContext":{"_type":"typeAlias","name":"ErrorHandlerContext","description":"\nProvides context for error handling, encapsulating details relevant to the failed HTTP request.\n","type":"export type ErrorHandlerContext = {\n    error: unknown;\n    methodName: string;\n    url: string;\n    params: unknown[];\n    config: ComputedConfig;\n    httpClient: HTTPClient;\n};","references":[{"href":"/sdk/api/sdk/ComputedConfig","text":"ComputedConfig"},{"href":"/sdk/api/sdk/HTTPClient","text":"HTTPClient"}]},"ErrorParams":{"_type":"typeAlias","name":"ErrorParams","description":"\nDefines the parameters required to construct an  `SDKError` .\n","type":"export type ErrorParams = {\n    message: string;\n    statusCode: number;\n    cause?: unknown;\n    url: string;\n};","references":[]},"EventCallback":{"_type":"typeAlias","name":"EventCallback","description":"\nEventCallback is a function that is called when an event is emitted.\n","type":"export type EventCallback = <T>(...data: Array<T>) => void;","references":[]},"eventManager":{"_type":"variable","id":"@vue-storefront/sdk!eventManager:var","name":"eventManager","description":"","type":"eventManager: EventManager"},"Extension":{"_type":"typeAlias","name":"Extension","description":"\nExtension Type represents the extension configuration. It provides extensibility mechanisms like interceptors, extensions, overrides, and pub/sub manager.\n","type":"export type Extension<ExtendedModule extends Module = Module> = Omit<Partial<Module>, \"connector\" | \"context\"> & {\n    extend?: Record<string, AnyFunction>;\n    override?: ModuleOverride<ExtendedModule[\"connector\"]>;\n    interceptors?: Array<InterceptorsConfig>;\n};","references":[{"href":"/sdk/api/sdk/Module","text":"Module"},{"href":"/sdk/api/sdk/AnyFunction","text":"AnyFunction"},{"href":"/sdk/api/sdk/InterceptorsConfig","text":"InterceptorsConfig"}]},"ExtensionInitializer":{"_type":"typeAlias","name":"ExtensionInitializer","description":"\nExtensionInitializer Type represents a function accepting extension options as an argument and returning the actual extension.\n","type":"export type ExtensionInitializer<ExtendedModule extends Module, InitializedExtension extends Extension<ExtendedModule>, Options extends ModuleOptions> = (options?: Options, parent?: {\n    methods: ExtendedModule[\"connector\"];\n    context?: ExtendedModule[\"context\"];\n}) => InitializedExtension;","references":[{"href":"/sdk/api/sdk/Module","text":"Module"},{"href":"/sdk/api/sdk/Extension","text":"Extension"},{"href":"/sdk/api/sdk/ModuleOptions","text":"ModuleOptions"}]},"getRequestSender":{"_type":"function","id":"@vue-storefront/sdk!getRequestSender:function(1)","name":"getRequestSender","description":"\nGenerates a  `RequestSender`  function configured according to the provided options.\n\nThis function abstracts away the details of constructing request URLs, merging configurations, handling errors, and executing HTTP requests.\n","references":[{"href":"/sdk/api/sdk/Options","text":"Options"},{"href":"/sdk/api/sdk/RequestSender","text":"RequestSender"}],"examples":[],"returns":{"description":"","type":"export type RequestSender = (\nmethodName: string, \nparams: unknown[], \nconfig?: RequestConfig) => Promise<any>;"},"signature":"getRequestSender: (\n\toptions: Options\n) => RequestSender","params":[{"_type":"param","name":"options","required":true,"type":"Options","description":""}]},"handleError":{"_type":"function","id":"@vue-storefront/sdk!handleError:function(1)","name":"handleError","description":"","references":[],"examples":[],"returns":{"description":"","type":""},"signature":"handleError: (\n\terr: Error\n) => SDKError","params":[{"_type":"param","name":"err","required":true,"type":"Error","description":""}]},"HTTPClient":{"_type":"typeAlias","name":"HTTPClient","description":"\nA customizable HTTP client function for making HTTP requests.\n\nThis type represents a flexible interface for HTTP clients within the SDK, allowing for customization and substitution of different HTTP request mechanisms (e.g., Fetch API, Axios).\n","type":"export type HTTPClient = (\nurl: string, \nparams: unknown[], \nconfig?: ComputedConfig) => Promise<true> | SdkHttpError;","references":[{"href":"/sdk/api/sdk/ComputedConfig","text":"ComputedConfig"},{"href":"/sdk/api/sdk/SdkHttpError","text":"SdkHttpError"}]},"InitFunction":{"_type":"typeAlias","name":"InitFunction","description":"\nInitFunction is a function that is called when the module is initialized. It contains the module options that is passed to the module and returns the module.\n","type":"export type InitFunction<T> = (opts?: any) => T;","references":[]},"initSDK":{"_type":"function","id":"@vue-storefront/sdk!initSDK:function(1)","name":"initSDK","description":"\nInitializes SDK\n","references":[{"href":"/sdk/api/sdk/Module","text":"Module"},{"href":"/sdk/api/sdk/Extension","text":"Extension"},{"href":"/sdk/api/sdk/SDKApi","text":"SDKApi"}],"examples":[{"description":"\nThis is an example of how to initialize SDK Providing generic type is required to get proper type inference.\n \n","snippet":"const sdkConfig = {\n  module1: buildModule<Module1, typeof extension>(module1, {}, extension),\n  module2: buildModule<Module2>(module2),\n};\n\nconst sdk = initSDK<typeof sdkConfig>(sdkConfig);\n\n","lang":"typescript"}],"returns":{"description":"","type":"export type SDKApi<Config extends SDKConfig> = {\n    [ExtensionName in keyof Config]: Config[ExtensionName][\"extend\"] & Omit<Config[ExtensionName][\"override\"], keyof Config[ExtensionName][\"extend\"]> & Omit<Config[ExtensionName][\"connector\"], keyof Config[ExtensionName][\"override\"] & keyof Config[ExtensionName][\"extend\"]>;\n} & {\n    +readonly [ExtensionName in keyof Config]: {\n        utils: {\n            +readonly [Method in keyof Config[ExtensionName][\"utils\"]]: Config[ExtensionName][\"utils\"][Method];\n        };\n    };\n};"},"signature":"initSDK: <T extends Readonly<Record<string,\n\timport(\n\t\"./types\"\n).Module> & Record<string,\n\timport(\"./types\").Extension<import(\"./types\").Module>>>>(sdkConfig: T) => SDKApi<T>","params":[{"_type":"param","name":"sdkConfig","required":true,"type":"T","description":"\nSDK configuration\n"}]},"initVSFSDK":{"_type":"function","id":"@vue-storefront/sdk!initVSFSDK:function(1)","name":"initVSFSDK","description":"\nAn old alias for initSDK function.\n","references":[{"href":"/sdk/api/sdk/Module","text":"Module"},{"href":"/sdk/api/sdk/Extension","text":"Extension"},{"href":"/sdk/api/sdk/SDKApi","text":"SDKApi"}],"examples":[],"returns":{"description":"","type":"export type SDKApi<Config extends SDKConfig> = {\n    [ExtensionName in keyof Config]: Config[ExtensionName][\"extend\"] & Omit<Config[ExtensionName][\"override\"], keyof Config[ExtensionName][\"extend\"]> & Omit<Config[ExtensionName][\"connector\"], keyof Config[ExtensionName][\"override\"] & keyof Config[ExtensionName][\"extend\"]>;\n} & {\n    +readonly [ExtensionName in keyof Config]: {\n        utils: {\n            +readonly [Method in keyof Config[ExtensionName][\"utils\"]]: Config[ExtensionName][\"utils\"][Method];\n        };\n    };\n};"},"signature":"initVSFSDK: <T extends Readonly<Record<string,\n\timport(\n\t\"./types\"\n).Module> & Record<string,\n\timport(\"./types\").Extension<import(\"./types\").Module>>>>(sdkConfig: T) => import(\"./types\").SDKApi<T>","params":[{"_type":"param","name":"sdkConfig","required":true,"type":"T","description":""}]},"Interceptor":{"_type":"typeAlias","name":"Interceptor","description":"\nAlias for the AnyFunction type. Used in the context of interceptors.\n","type":"export type Interceptor = AnyFunction;","references":[{"href":"/sdk/api/sdk/AnyFunction","text":"AnyFunction"}]},"InterceptorArgsAfter":{"_type":"typeAlias","name":"InterceptorArgsAfter","description":"\nUtility type that defines the type of arguments that are passed to the  `after`  interceptor.\n","type":"export type InterceptorArgsAfter<RESULT extends AnyFunction> = Awaited<ReturnType<RESULT>>;","references":[{"href":"/sdk/api/sdk/AnyFunction","text":"AnyFunction"}]},"InterceptorArgsBefore":{"_type":"typeAlias","name":"InterceptorArgsBefore","description":"\nUtility type that defines the type of arguments that are passed to the  `before`  interceptor.\n","type":"export type InterceptorArgsBefore<ARGS extends AnyFunction> = Parameters<ARGS>;","references":[{"href":"/sdk/api/sdk/AnyFunction","text":"AnyFunction"}]},"InterceptorResultAfter":{"_type":"typeAlias","name":"InterceptorResultAfter","description":"\nUtility type that defines the type of the result that is returned from the  `after`  interceptor.\n","type":"export type InterceptorResultAfter<RESULT extends AnyFunction> = Promise<ReturnType<RESULT>>;","references":[{"href":"/sdk/api/sdk/AnyFunction","text":"AnyFunction"}]},"InterceptorResultBefore":{"_type":"typeAlias","name":"InterceptorResultBefore","description":"\nUtility type that defines the type of the result that is returned from the  `before`  interceptor.\n","type":"export type InterceptorResultBefore<ARGS extends AnyFunction> = Promise<Parameters<ARGS>>;","references":[{"href":"/sdk/api/sdk/AnyFunction","text":"AnyFunction"}]},"InterceptorsConfig":{"_type":"typeAlias","name":"InterceptorsConfig","description":"\nInterceptorsConfig represents the configuration of the interceptors. It is a map of the interceptor type to the map of the method name to the interceptor.\n","type":"export type InterceptorsConfig = {\n    [type in InterceptorType]?: Record<string, Interceptor | Array<Interceptor> | undefined>;\n};","references":[{"href":"/sdk/api/sdk/InterceptorType","text":"InterceptorType"},{"href":"/sdk/api/sdk/Interceptor","text":"Interceptor"}]},"InterceptorType":{"_type":"typeAlias","name":"InterceptorType","description":"\nInterceptorType represents the type of the interceptor.\n","type":"export type InterceptorType = \"before\" | \"after\" | \"around\";","references":[]},"isCausedBySdkHttpError":{"_type":"function","id":"@vue-storefront/sdk!isCausedBySdkHttpError:function(1)","name":"isCausedBySdkHttpError","description":"\nChecks if the given error was caused by  `SDKError` .\n","references":[{"href":"/sdk/api/sdk/ErrorCausedBySDKError","text":"ErrorCausedBySDKError"}],"examples":[{"description":"\n\n \n","snippet":"catch (error) {\n  if (isCausedBySdkError(error)) {\n    const statusCode = error.cause.statusCode;\n  }\n}\n\n","lang":"typescript"}],"returns":{"description":"\nA type predicate indicating whether the error is an  `ErrorCausedBySDKError` .\n","type":"export type ErrorCausedBySDKError = Error & {\n    cause: SdkHttpError;\n};"},"signature":"isCausedBySdkHttpError: (\n\terror: unknown\n) => error is ErrorCausedBySDKError","params":[{"_type":"param","name":"error","required":true,"type":"unknown","description":"\nThe error to check.\n"}]},"isSdkRequestError":{"_type":"function","id":"@vue-storefront/sdk!isSdkRequestError:function(1)","name":"isSdkRequestError","description":"\nChecks if the given error was caused by  `SDKError`  and its status code is between 400 and 500, indicating a client error.\n","references":[{"href":"/sdk/api/sdk/ErrorCausedBySDKError","text":"ErrorCausedBySDKError"}],"examples":[{"description":"\n\n \n","snippet":"catch (error) {\n  if (isSdkRequestError(error)) {\n    // handle client error\n  }\n}\n\n","lang":"typescript"}],"returns":{"description":"\nA type predicate indicating whether the error is a client error caused by  `SDKError` .\n","type":"export type ErrorCausedBySDKError = Error & {\n    cause: SdkHttpError;\n};"},"signature":"isSdkRequestError: (\n\terror: unknown\n) => error is ErrorCausedBySDKError","params":[{"_type":"param","name":"error","required":true,"type":"unknown","description":"\nThe error to check.\n"}]},"isSdkUnauthorizedError":{"_type":"function","id":"@vue-storefront/sdk!isSdkUnauthorizedError:function(1)","name":"isSdkUnauthorizedError","description":"\nChecks if the given error was caused by  `SDKError`  and its status code is 401, indicating an unauthorized request error.\n","references":[{"href":"/sdk/api/sdk/ErrorCausedBySDKError","text":"ErrorCausedBySDKError"}],"examples":[{"description":"\n\n \n","snippet":"catch (error) {\n  if (isSdkUnauthorizedError(error)) {\n    // handle unauthorized error\n  }\n}\n\n","lang":"typescript"}],"returns":{"description":"\nA type predicate indicating whether the error is an unauthorized request error caused by  `SDKError` .\n","type":"export type ErrorCausedBySDKError = Error & {\n    cause: SdkHttpError;\n};"},"signature":"isSdkUnauthorizedError: (\n\terror: unknown\n) => error is ErrorCausedBySDKError","params":[{"_type":"param","name":"error","required":true,"type":"unknown","description":"\nThe error to check.\n"}]},"isSpecificSdkHttpError":{"_type":"function","id":"@vue-storefront/sdk!isSpecificSdkHttpError:function(1)","name":"isSpecificSdkHttpError","description":"\nChecks if the given error was caused by  `SDKError`  and matches a specific status code or condition.\n","references":[{"href":"/sdk/api/sdk/SdkErrorPredicate","text":"SdkErrorPredicate"},{"href":"/sdk/api/sdk/ErrorCausedBySDKError","text":"ErrorCausedBySDKError"}],"examples":[{"description":"\n\n \n","snippet":"catch (error) {\n  if (isSpecificSdkError(error, { statusCode: 422 })) {\n    // handle 422\n  }\n}\n\n","lang":"typescript"},{"description":"\n\n \n","snippet":"catch (error) {\n  if (isSpecificSdkError(error, { statusCode: (code) => code === 401 || code === 403 })) {\n    // handle 401 or 403\n  }\n}\n\n","lang":"typescript"}],"returns":{"description":"\nA type predicate indicating whether the error matches the specific condition.\n","type":"export type ErrorCausedBySDKError = Error & {\n    cause: SdkHttpError;\n};"},"signature":"isSpecificSdkHttpError: (\n\terror: unknown,\n\tstatusCodePredicate: SdkErrorPredicate\n) => error is ErrorCausedBySDKError","params":[{"_type":"param","name":"error","required":true,"type":"unknown","description":"\nThe error to check.\n"},{"_type":"param","name":"statusCodePredicate","required":true,"type":"SdkErrorPredicate","description":"\nThe predicate to match the error's status code against.\n"}]},"Logger":{"_type":"typeAlias","name":"Logger","description":"\nCustom logger for the middlewareModule, allowing for request and response logging.\n","type":"export type Logger = {\n    onRequest?: (payload: OnRequestPayload) => void;\n    onResponse?: (payload: OnResponsePayload) => void;\n};","references":[{"href":"/sdk/api/sdk/OnRequestPayload","text":"OnRequestPayload"},{"href":"/sdk/api/sdk/OnResponsePayload","text":"OnResponsePayload"}]},"MethodConfig":{"_type":"typeAlias","name":"MethodConfig","description":"\nConfiguration specific to a method, merging  `RequestConfig`  with an internal flag. Indicates that the configuration is ready for making a request.\n","type":"export type MethodConfig = RequestConfig & {\n    [isConfig]: boolean;\n};","references":[{"href":"/sdk/api/sdk/RequestConfig","text":"RequestConfig"}]},"Methods":{"_type":"typeAlias","name":"Methods","description":"\nFinal type for the SDK methods.\n \nIt requires the  `Endpoints`  interface to be provided.\n \nBased on this interface it will generate the methods with the correct parameters and return types.\n \nTo each endpoint, it will add the  `config`  parameter with the  `MethodConfig`  type.\n","type":"export type Methods<Endpoints extends EndpointsConstraint> = {\n    [Key in keyof Endpoints]: (...params: [...Parameters<Endpoints[Key]>, config?: MethodConfig]) => ReturnType<Endpoints[Key]>;\n};","references":[{"href":"/sdk/api/sdk/EndpointsConstraint","text":"EndpointsConstraint"},{"href":"/sdk/api/sdk/MethodConfig","text":"MethodConfig"}]},"middlewareModule":{"_type":"function","id":"@vue-storefront/sdk!middlewareModule:function(1)","name":"middlewareModule","description":"\n`middlewareModule`  is allowing to communicate with the Server Middleware API.\n \nIt generates the methods to communicate with the API based on the provided endpoints interface.\n","references":[{"href":"/sdk/api/sdk/EndpointsConstraint","text":"EndpointsConstraint"},{"href":"/sdk/api/sdk/Options","text":"Options"},{"href":"/sdk/api/sdk/Methods","text":"Methods"},{"href":"/sdk/api/sdk/RequestSender","text":"RequestSender"}],"examples":[{"description":"\nSetup:\n \n","snippet":"import { createSdk } from \"@vue-storefront/next\";\nimport type { SapccEndpoints } from \"../storefront-middleware/types\";\n\nexport const { getSdk } = createSdk(options, ({ buildModule, middlewareModule }) => ({\n  sapcc: buildModule(middlewareModule<SapccEndpoints>, {\n    apiUrl: \"http://localhost:4000/sapcc\",\n  }),\n}));\n\n","lang":"ts"},{"description":"\nUsage:\n \n","snippet":"import { createSdk } from \"@vue-storefront/next\";\nimport type { SapccEndpoints } from \"../storefront-middleware/types\";\n\nconst extension = (extensionOptions, { methods, context }) => ({\n  extend: {\n    async newMethod(params) {\n      const response = await context.requestSender(\"customMethod\", [params]);\n      const products = await methods.getProducts(params);\n      return { ...response, ...products };\n    }\n  }\n});\n\nexport const { getSdk } = createSdk(options, ({ buildModule, middlewareModule }) => ({\n  sapcc: buildModule(middlewareModule<SapccEndpoints>, {\n    apiUrl: \"http://localhost:4000/sapcc\",\n  }, extension),\n}));\n\n","lang":"ts"}],"returns":{"description":"","type":"export type Methods<Endpoints extends EndpointsConstraint> = {\n    [Key in keyof Endpoints]: (...params: [...Parameters<Endpoints[Key]>, config?: MethodConfig]) => ReturnType<Endpoints[Key]>;\n};"},"signature":"middlewareModule: <Endpoints extends EndpointsConstraint>(\n\toptions: Options<Endpoints>\n) => {\n    connector: import(\"./types\").Methods<Endpoints>;\n    context: {\n        requestSender: import(\"./types\").RequestSender;\n    };\n}","params":[{"_type":"param","name":"options","required":true,"type":"Options<Endpoints>","description":""}]},"Module":{"_type":"typeAlias","name":"Module","description":"\nModule Type represents the module configuration. It is a pluggable piece of code in a standalone package. Module can be a subject of interceptors, overrides and extensions.\n","type":"export type Module = {\n    connector: Connector;\n    utils?: Record<string, any>;\n    subscribers?: Subscribers;\n    context?: Record<string, any>;\n};","references":[{"href":"/sdk/api/sdk/Connector","text":"Connector"},{"href":"/sdk/api/sdk/Subscribers","text":"Subscribers"}]},"ModuleInitializer":{"_type":"typeAlias","name":"ModuleInitializer","description":"\nModuleInitializer Type represents a function accepting optional module options as an argument and returning the actual module.\n","type":"export type ModuleInitializer<InitializedModule extends Module, Options extends ModuleOptions> = (options?: Options) => InitializedModule;","references":[{"href":"/sdk/api/sdk/Module","text":"Module"},{"href":"/sdk/api/sdk/ModuleOptions","text":"ModuleOptions"}]},"ModuleInitializerWithMandatoryOptions":{"_type":"typeAlias","name":"ModuleInitializerWithMandatoryOptions","description":"\nStrictModuleInitializer Type represents a function accepting mandatory module options as an argument and returning the actual module.\n","type":"export type ModuleInitializerWithMandatoryOptions<InitializedModule extends Module, Options extends ModuleOptions> = (options: Options) => InitializedModule;","references":[{"href":"/sdk/api/sdk/Module","text":"Module"},{"href":"/sdk/api/sdk/ModuleOptions","text":"ModuleOptions"}]},"ModuleOptions":{"_type":"typeAlias","name":"ModuleOptions","description":"\nModuleOptions Type represents a generic module options object.\n","type":"export type ModuleOptions = Record<string, any>;","references":[]},"OnRequestPayload":{"_type":"typeAlias","name":"OnRequestPayload","description":"\nPayload for the  `onRequest`  logger.\n","type":"export type OnRequestPayload = {\n    config: ComputedConfig;\n    params: unknown[];\n    url: string;\n};","references":[{"href":"/sdk/api/sdk/ComputedConfig","text":"ComputedConfig"}]},"OnResponsePayload":{"_type":"typeAlias","name":"OnResponsePayload","description":"\nPayload for the  `onResponse`  logger.\n","type":"export type OnResponsePayload = {\n    config: ComputedConfig;\n    params: unknown[];\n    response: unknown;\n    responseTime: number;\n    url: string;\n};","references":[{"href":"/sdk/api/sdk/ComputedConfig","text":"ComputedConfig"}]},"Options":{"_type":"typeAlias","name":"Options","description":"\nOptions for the  `middlewareModule` .\n","type":"export type Options<Endpoints extends EndpointsConstraint = EndpointsConstraint> = {\n    apiUrl: string;\n    ssrApiUrl?: string;\n    httpClient?: HTTPClient;\n    defaultRequestConfig?: RequestConfig;\n    methodsRequestConfig?: Partial<Record<keyof Endpoints, RequestConfig>>;\n    errorHandler?: ErrorHandler;\n    cdnCacheBustingId?: string;\n    logger?: boolean | Logger;\n};","references":[{"href":"/sdk/api/sdk/EndpointsConstraint","text":"EndpointsConstraint"},{"href":"/sdk/api/sdk/HTTPClient","text":"HTTPClient"},{"href":"/sdk/api/sdk/RequestConfig","text":"RequestConfig"},{"href":"/sdk/api/sdk/ErrorHandler","text":"ErrorHandler"},{"href":"/sdk/api/sdk/Logger","text":"Logger"}]},"prepareConfig":{"_type":"function","id":"@vue-storefront/sdk!prepareConfig:function(1)","name":"prepareConfig","description":"\nPrepare the config for the request. It's used to differentiate the method config from the params.\n","references":[{"href":"/sdk/api/sdk/RequestConfig","text":"RequestConfig"},{"href":"/sdk/api/sdk/MethodConfig","text":"MethodConfig"}],"examples":[{"description":"\nUsage\n \n","snippet":"import { prepareConfig } from \"@vue-storefront/sdk\";\n\nconst products = sdk.commerce.getProducts(params, prepareConfig({ method: \"GET\" }));\n\n","lang":"ts"}],"returns":{"description":"","type":"export type MethodConfig = RequestConfig & {\n    [isConfig]: boolean;\n};"},"signature":"prepareConfig: (\n\trequestConfig: RequestConfig\n) => MethodConfig","params":[{"_type":"param","name":"requestConfig","required":true,"type":"RequestConfig","description":""}]},"RequestConfig":{"_type":"typeAlias","name":"RequestConfig","description":"\nUser-defined configuration for HTTP requests, extending  `BaseConfig` . Allows custom headers, supporting both strings and arrays of strings for header values.\n","type":"export type RequestConfig = BaseConfig & {\n    headers?: Record<string, string | string[]>;\n};","references":[{"href":"/sdk/api/sdk/BaseConfig","text":"BaseConfig"}]},"RequestSender":{"_type":"typeAlias","name":"RequestSender","description":"\nRepresents a function type for sending HTTP requests, abstracting the complexity of request configuration.\n\nThis type is created via a factory function that configures it with common settings, such as base URLs and default headers.\n \nIt simplifies making HTTP requests by handling URL construction, parameter serialization, and applying default and overridden configurations.\n","type":"export type RequestSender = (\nmethodName: string, \nparams: unknown[], \nconfig?: RequestConfig) => Promise<any>;","references":[{"href":"/sdk/api/sdk/RequestConfig","text":"RequestConfig"}]},"SDKApi":{"_type":"typeAlias","name":"SDKApi","description":"\nSDKApi represents the API of the SDK. On the init SDK transform configuration data to compose an API and apply interceptors to all methods. This requires a dynamic type mapping to provide the user with the best possible developer experience.\n \nThe following type map understand the SDK configuration input and produce usable SDK api with all type hints.\n","type":"export type SDKApi<Config extends SDKConfig> = {\n    [ExtensionName in keyof Config]: Config[ExtensionName][\"extend\"] & Omit<Config[ExtensionName][\"override\"], keyof Config[ExtensionName][\"extend\"]> & Omit<Config[ExtensionName][\"connector\"], keyof Config[ExtensionName][\"override\"] & keyof Config[ExtensionName][\"extend\"]>;\n} & {\n    +readonly [ExtensionName in keyof Config]: {\n        utils: {\n            +readonly [Method in keyof Config[ExtensionName][\"utils\"]]: Config[ExtensionName][\"utils\"][Method];\n        };\n    };\n};","references":[{"href":"/sdk/api/sdk/SDKConfig","text":"SDKConfig"}]},"SDKConfig":{"_type":"typeAlias","name":"SDKConfig","description":"\nSDKConfig represents the configuration and the API of the SDK.\n","type":"export type SDKConfig = Readonly<Record<string, Module> & Record<string, Extension<Module>>>;","references":[{"href":"/sdk/api/sdk/Module","text":"Module"},{"href":"/sdk/api/sdk/Extension","text":"Extension"}]},"SdkErrorPredicate":{"_type":"typeAlias","name":"SdkErrorPredicate","description":"\nDefines a predicate for checking an  `SDKError`  based on its status code.\n","type":"export type SdkErrorPredicate = {\n    statusCode: number | ((statusCode: number) => boolean);\n};","references":[]},"Subscribers":{"_type":"typeAlias","name":"Subscribers","description":"\nSubscribers are declarative callbacks that are called when an event is emitted.\n","type":"export type Subscribers = Record<string, EventCallback | Array<EventCallback>>;","references":[{"href":"/sdk/api/sdk/EventCallback","text":"EventCallback"}]},"packageName":"sdk"},"hash":"lLsDcOt7hK"}